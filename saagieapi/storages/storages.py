import logging
from typing import Dict, Optional

from gql import gql

from .gql_queries import *


class Storages:
    def __init__(self, saagie_api):
        self.saagie_api = saagie_api

    def list_for_project(
        self, project_id: str, minimal: Optional[bool] = False, pprint_result: Optional[bool] = None
    ) -> Dict:
        """List storages of project.

        Note
        ----
        You can only list storage if you have at least the viewer role on
        the project.

        Parameters
        ----------
        project_id : str
            UUID of your project (see README on how to find it)
        minimal : bool, optional
            Whether to only return the storage's name and id, default to False
        pprint_result : bool, optional
            Whether to pretty print the result of the query, default to
            saagie_api.pprint_global

        Returns
        -------
        dict
            Dict of storage information

        Examples
        --------
        >>> saagieapi.storages.list_for_project(
        ...     project_id="860b8dc8-e634-4c98-b2e7-f9ec32ab4771",
        ...     minimal=False
        ... )
        {
            "volumes":[
                {
                    "id":"89bf5f86-3fc3-4bf6-879b-7ca8eafe6c4f",
                    "name":"storage Jupyter Notebook (0)",
                    "size":"64 MB",
                    "description":"Autogenerated storage from app installation for \"/notebooks-dir\" path in \"Jupyter Notebook\" app.",
                    "creationDate":"2022-08-26T13:12:05.363Z",
                    "creator":"guillaume.prevost",
                    "linkedApp":{
                        "id":"6871e9a2-2c06-45fe-bf8d-6356090f1d1d",
                        "name":"Jupyter Notebook",
                        "versions":[
                            {
                                "number":1,
                                "volumesWithPath":[
                                    {
                                        "path":"/notebooks-dir",
                                        "volume":{
                                            "id":"89bf5f86-3fc3-4bf6-879b-7ca8eafe6c4f"
                                        }
                                    }
                                ]
                            }
                        ],
                        "currentVersion":{
                            "number":1,
                            "volumesWithPath":[]
                        }
                    }
                },
                {
                    "id":"905d8441-8955-444f-a333-19d7c6fe6274",
                    "name":"test",
                    "size":"128 MB",
                    "description":"test description",
                    "creationDate":"2022-08-29T08:02:11.811Z",
                    "creator":"user.name",
                    "linkedApp":{
                        "id":"c7b2b5ea-834a-4e0e-bfa4-f3303477b9e5",
                        "name":"test_app",
                        "versions":[
                            {
                                "number":5,
                                "volumesWithPath":[
                                    {
                                        "path":"/data",
                                        "volume":{
                                            "id":"905d8441-8955-444f-a333-19d7c6fe6274"
                                        }
                                    }
                                ]
                            }
                        ],
                        "currentVersion":{
                            "number":1,
                            "volumesWithPath":[
                                {
                                    "path":"/data",
                                    "volume":{
                                        "id":"905d8441-8955-444f-a333-19d7c6fe6274"
                                    }
                                }
                            ]
                        }
                    }
                }
            ]
        }
        """  # pylint: disable=line-too-long
        params = {
            "id": project_id,
            "minimal": minimal,
        }

        return self.saagie_api.client.execute(
            query=gql(GQL_LIST_STORAGE_FOR_PROJECT), variable_values=params, pprint_result=pprint_result
        )

    def get_info(self, project_id: str, storage_id: str) -> Dict:
        """Get storage information.

        Note
        ----
        You can only get storage information if you have at least the viewer role on
        the project.

        Parameters
        ----------
        project_id : str
            UUID of your project
        storage_id : str
            UUID of your storage

        Returns
        -------
        dict
            Dict of storage information

        Examples
        --------
        >>> saagieapi.storages.get_info(
        ...     project_id="860b8dc8-e634-4c98-b2e7-f9ec32ab4771",
        ...     job_id="f5fce22d-2152-4a01-8c6a-4c2eb4808b6d"
        ... )
        {
            "id":"89bf5f86-3fc3-4bf6-879b-7ca8eafe6c4f",
            "name":"storage Jupyter Notebook (0)",
            "size":"64 MB",
            "description":"Autogenerated storage from app installation for \"/notebooks-dir\" path in \"Jupyter Notebook\" app.",
            "creationDate":"2022-08-26T13:12:05.363Z",
            "creator":"user.name",
            "linkedApp":{
                "id":"6871e9a2-2c06-45fe-bf8d-6356090f1d1d",
                "name":"Jupyter Notebook",
                "versions":[
                    {
                        "number":1,
                        "volumesWithPath":[
                            {
                                "path":"/notebooks-dir",
                                "volume":{
                                    "id":"89bf5f86-3fc3-4bf6-879b-7ca8eafe6c4f"
                                }
                            }
                        ]
                    }
                ],
                "currentVersion":{
                    "number":1,
                    "volumesWithPath":[]
                }
            }
        }
        """  # pylint: disable=line-too-long
        storages = self.list_for_project(project_id)["project"]["volumes"]
        for storage in storages:
            if storage["id"] == storage_id:
                return storage

        raise ValueError(f"❌ Storage '{storage_id}' not found in project '{project_id}'")

    def create(
        self,
        project_id: str,
        storage_name: str,
        storage_size: int,
        storage_description: Optional[str] = None,
    ) -> Dict:
        """Create a storage

        Note
        ----
        Each optional parameter can be set to change the value of the corresponding field.

        Parameters
        ----------
        project_id: str
            UUID of your project
        storage_name : str
            Storage name
        storage_size : int, optional
            Size of the storage
        storage_description : str, optional
            Description of storage
            if not filled, the storage will have no description

        Returns
        -------
        dict
            Dict of storage information

        Examples
        --------
        >>> saagieapi.storages.create(
        ...     project_id="860b8dc8-e634-4c98-b2e7-f9ec32ab4771",
        ...     storage_name="storage name",
        ...     storage_size="128 MB",
        ...     storage_description="storage description"
        ... )
        {
            "createVolume":{
                "id":"fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
                "name":"storage name",
                "size":"128 MB",
                "description":"storage description",
                "creationDate":"2022-09-12T13:52:19.523Z",
                "creator":"user.name",
                "linkedApp":"None"
            }
        }
        """
        params = {
            "projectId": project_id,
            "name": storage_name,
            "size": storage_size,
        }

        if storage_description:
            params["description"] = storage_description

        params = {"volume": params}
        result = self.saagie_api.client.execute(query=gql(GQL_CREATE_STORAGE), variable_values=params)
        logging.info("✅ Storage [%s] successfully created", storage_name)
        return result

    def edit(
        self,
        storage_id: str,
        storage_name: str = None,
        description: str = None,
    ) -> Dict:
        """Edit a storage

        Note
        ----
        Each optional parameter can be set to change the value of the corresponding field.

        Parameters
        ----------
        storage_id : str
            UUID of your storage
        storage_name : str, optional
            Storage name
            If not filled, defaults to current value, else it will change the storage's name
        description : str, optional
            Description of storage
            if not filled, defaults to current value, else it will change the description of the storage

        Returns
        -------
        dict
            Dict of storage information

        Examples
        --------
        >>> saagieapi.storages.edit(
        ...     storage_id="fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
        ...     storage_name="storage new name",
        ...     storage_description="storage new description"
        ... )
        {
            "editVolume":{
                "id":"fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
                "name":"storage new name",
            }
        }
        """
        params = {
            "id": storage_id,
        }

        if storage_name:
            params["name"] = storage_name

        if description:
            params["description"] = description

        params = {"volume": params}
        result = self.saagie_api.client.execute(query=gql(GQL_EDIT_STORAGE), variable_values=params)
        logging.info("✅ Storage [%s] successfully edited", storage_id)
        return result

    def delete(self, storage_id: str, project_id: str) -> Dict:
        """Delete a given storage (not currently used)

        Parameters
        ----------
        storage_id : str
            UUID of your storage
        project_id : str
            UUID of your storage project

        Returns
        -------
        dict
            Dict of deleted storage

        Raises
        ------
        ValueError
            When the storage is currently used

        Examples
        --------
        >>> saagieapi.storages.delete(
        ...     storage_id="fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
        ...     project_id="860b8dc8-e634-4c98-b2e7-f9ec32ab4771"
        ... )
        {
            "deleteVolume":{
                "id":"fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
                "name":"storage new name",
            }
        }
        """
        storage_info = self.get_info(project_id, storage_id)
        if storage_info["linkedApp"] is not None and "currentVersion" in storage_info["linkedApp"]:
            for volume in storage_info["linkedApp"]["currentVersion"]["volumesWithPath"]:
                if volume["volume"]["id"] == storage_id:
                    raise ValueError(f"❌ Storage '{storage_id}' is currently used by an App. Deletion impossible.")

        result = self.saagie_api.client.execute(query=gql(GQL_DELETE_STORAGE), variable_values={"id": storage_id})
        logging.info("✅ Storage [%s] successfully deleted", storage_id)
        return result

    def unlink(self, storage_id: str, project_id: str) -> Dict:
        """Unlink a given storage (not currently used) to the associated app

        Parameters
        ----------
        storage_id : str
            UUID of your storage
        project_id : str
            UUID of your storage project

        Returns
        -------
        dict
            Dict of unlink storage

        Raises
        ------
        ValueError
            When the storage is currently used

        Examples
        --------
        >>> saagieapi.storages.unlink(
        ...     storage_id="fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
        ...     project_id="860b8dc8-e634-4c98-b2e7-f9ec32ab4771"
        ... )
        {
            "unlinkVolume":{
                "id":"fdb43a11-ccec-4b10-9690-2b83fbd7eb93",
                "name":"storage new name",
            }
        }
        """
        storage_info = self.get_info(project_id, storage_id)
        if storage_info["linkedApp"] is not None and "currentVersion" in storage_info["linkedApp"].keys():
            for volume in storage_info["linkedApp"]["currentVersion"]["volumesWithPath"]:
                if volume["volume"]["id"] == storage_id:
                    raise ValueError(f"❌ Storage '{storage_id}' is currently used by an App. Unlink impossible.")

        result = self.saagie_api.client.execute(query=gql(GQL_UNLINK_STORAGE), variable_values={"id": storage_id})
        logging.info("✅ Storage [%s] successfully unlinked", storage_id)
        return result
